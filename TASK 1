Day 1 -------------Task 1----------------------06/09/2022


1.Write a blog on Difference between HTTP1.1 vs HTTP2?


                 >>> The Hypertext Transfer Protocol, or HTTP, is an application protocol that has been the de facto standard for communication
                    on the World Wide Web since its invention in 1989. From the release of HTTP/1.1 in 1997 until recently, there have been few revisions
                    to the protocol. But in 2015, a reimagined version called HTTP/2 came into use, which offered several methods to decrease latency,
                    especially when dealing with mobile platforms and server-intensive graphics and videos.
                    
                 >>> The main differences between HTTP 1.1 and HTTP 2 are mentioned below, 
                    
                    


HTTP 1.1

1--> Key features: 
                * It supports connection reuse for every TCP connection there could be multiple requests and responses, and pipelining where the client
                can request several resources from the server at once.
                
                * However, pipelining was hard to implement due to issues such as head-of-line blocking and was not a feasible solution.
                
                *Simply,There is head of line blocking that blocks all the requests behind it until it doesn’t get its all resources.
                
2--> Status code :
                * Introduces a warning header field to carry additional information about the status of a message. Can define 24 status codes,
                error reporting is quicker and more efficient.
                
3--> Authentication Mechanism :
                * It is relatively secure since it uses digest authentication, NTLM authentication.
                
4--> Caching :
                * Expands on the caching support by using additional headers like cache-control, conditional headers like If-Match and by using entity tags.
                
5--> Web Traffic :
                * HTTP/1.1 provides faster delivery of web pages and reduces web traffic as compared to HTTP/1.0. However, TCP starts slowly and with domain 
                sharding , connection reuse and pipelining, there is an increased risk of network congestion.
                
6--> Format :

                * It uses works on the textual format and it requests resource Inlining for use getting multiple pages
                
                
                
 HTTP 2
 
 1--> Key features: 
                * It Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at
                the same time. 
                
                * It is done using streams which can be prioritized, can have dependencies and individual flow control. It also provides a feature called
               server push that allows the server to send data that the client will need but has not yet requested.
                 
2--> Status code :
                * The Underlying semantics of HTTP such as headers, status codes remains the same.
                
3--> Authentication Mechanism :
                * Security concerns from previous versions will continue to be seen in HTTP/2. However, it is better equipped to deal with them due to 
                new TLS features like connection error of type Inadequate_Security.

4--> Caching :
                * HTTP/2 does not change much in terms of caching. With the server push feature if the client finds the resources are already present in
                the cache, it can cancel the pushed stream.
                
5--> Web Traffic :
                * HTTP/2 utilizes multiplexing and server push to effectively reduce the page load time by a greater margin along with being less sensitive
                to network delays.
                
                
                
                
                
2.Write a blog about objects and its internal representation in Javascript?

                * Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. These objects are quite
                different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol),Primitive data types contain one value.
                
                * But Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
                An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. That 
                reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
                
                * Objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of
                “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

                For Eg. If object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.
                
                
OBJECTS AND PROPERTIES

               * A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. 
               Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. The properties of an object
               define the characteristics of the object. You access the properties of an object with a simple dot-notation:

                         objectName.propertyName
                   
               * Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. You can 
               define a property by assigning it a value. For example, let’s create an object named myCar and give it properties named make, model, and
               year as follows:

                             var myCar = new Object();
                             myCar.make = 'Ford';
                             myCar.model = 'Mustang';
                             myCar.year = 1969;
                
               * Unassigned properties of an object are undefined (and not null).

                             myCar.color; // undefined
                
               
                Properties of JavaScript objects can also be accessed or set using a bracket notation. Objects are sometimes called associative arrays, 
                since each property is associated with a string value that can be used to access it. So, for example, you could access the properties of 
                the myCar object as follows:

                            myCar['make'] = 'Ford';
                            myCar['model'] = 'Mustang';
                            myCar['year'] = 1969;
                            
                An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string.
                However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that
                starts with a number) can only be accessed using the square bracket notation. This notation is also very useful when property names are to 
                be dynamically determined (when the property name is not determined until runtime). Examples are as follows:

                       // four variables are created and assigned in a single go, 
                      // separated by commas
                         var myObj = new Object(),
                         str = 'myString',
                         rand = Math.random(),
                         obj = new Object();
                         myObj.type              = 'Dot syntax';
                         myObj['date created']   = 'String with space';
                         myObj[str]              = 'String value';
                         myObj[rand]             = 'Random Number';
                         myObj[obj]              = 'Object';
                         myObj['']               = 'Even an empty string';console.log(myObj);
                You can also access properties by using a string value that is stored in a variable:

                         var propertyName = 'make';
                         myCar[propertyName] = 'Ford';propertyName = 'model';
                         myCar[propertyName] = 'Mustang';


                
 
